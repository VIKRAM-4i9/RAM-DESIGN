// ram.v - Synchronous RAM
module ram #(parameter DATA_WIDTH = 8, ADDR_WIDTH = 4)(
    input wire clk,
    input wire we,           // Write Enable
    input wire [ADDR_WIDTH-1:0] addr,
    input wire [DATA_WIDTH-1:0] din,
    output reg [DATA_WIDTH-1:0] dout
);

    // RAM memory
    reg [DATA_WIDTH-1:0] mem [0:(1<<ADDR_WIDTH)-1];

    always @(posedge clk) begin
        if (we)
            mem[addr] <= din;          // Write operation
        else
            dout <= mem[addr];         // Read operation
    end

endmodule

//TESTBENCH

// tb_ram.v - Testbench for Synchronous RAM
`timescale 1ns / 1ps

module tb_ram;

    parameter DATA_WIDTH = 8;
    parameter ADDR_WIDTH = 4;

    reg clk;
    reg we;
    reg [ADDR_WIDTH-1:0] addr;
    reg [DATA_WIDTH-1:0] din;
    wire [DATA_WIDTH-1:0] dout;

    // Instantiate the RAM
    ram #(DATA_WIDTH, ADDR_WIDTH) uut (
        .clk(clk),
        .we(we),
        .addr(addr),
        .din(din),
        .dout(dout)
    );

    // Clock generation
    always #5 clk = ~clk;

    initial begin
        // Initialize
        clk = 0;
        we = 0;
        addr = 0;
        din = 0;

        // Write data
        #10 we = 1; addr = 4'h3; din = 8'hA5; // Write A5 to address 3
        #10 addr = 4'h7; din = 8'h5A;         // Write 5A to address 7

        // Read data
        #10 we = 0; addr = 4'h3;              // Read from address 3
        #10 addr = 4'h7;                      // Read from address 7

        #10 $finish;
    end

endmodule
